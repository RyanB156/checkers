

User Functionality
    Register
        User clicks 'Register' on the menu bar √
        User enters username √
        User enters password √
        User clicks 'Submit' √
        Client creates hash = H(password) √
        Client submits {username, hash} to Server √
        Server checks uniqueness of username √
        Server adds User to data store √
        -> Login √
    Login
        User clicks 'Login' on the menu bar √
        User enters username √
        User enters password √
        User clicks 'Submit' √
        Client creates hash = H(password) √
        Client submits {username, hash} to Server √
        Server checks username and hash against data store √
        -> Home √
    Host Game
        User clicks 'Host Game' on Home √
        Client tells Server to create a new game √
        Server creates a pending game session with User as Host √
        -> Wait for Other Player to Join √
    Wait for Other Player to Join
        Client idles showing a waiting screen √
        -> Start Game √
    Join Game
        User clicks on 'Join Game' √
        Client displays text box for game code √
        User enters game code from friend that is hosting a game √
        User clicks 'Join' √
        Client sends game code to server √
        Server checks game code, adds username to the 'friend' field √
        -> Wait for Game to Start √
    Wait for Game to Start
        Client refreshes on Game Lobby to show when game starts √
    Start Game
        User clicks on 'Start' √
        Host Client requests active game session from Server √
        Server gives game state to Host User and Other User √
        -> Play Game
    Play Game
        Movement
            Pieces move diagonally, staying on black tiles √
            Normal pieces can only move towards the opponent √
            King pieces can move forward or backwards √
        Capturing
            Pieces jump over the opponent's pieces to capture them √
            A piece cannot capture if the other piece is guarded √
        Promotion
            A normal piece that reaches the opponents home row becomes a King √
        Finishing a Game
            Win/Loss if all pieces are captured or if a player quits (Need to check for if a player quits, times out, etc.)
    View Stats
        User clicks 'View Stats' on Home
        Client requests stats from Server
        Client displays stats


Security Requirements
    Do not expose user information, even if using http
    Do not allow players to manage game state √
    Do not allow players to masquerade as the other player √

    Establish secure communication with Server
        Client initiates connection w/o encryption over HTTP
        Server and Client exchange symmetric keys w/ DH or EC

    Secure communication with Server
        Client encrypts message with its symmetric key
        Client sends encrypted message to Server
        Server looks up the symmetric key using activeSessions[clientIP]
        Server decrypts the message
            If the message decrypts successfully, it will have 'username' and 'sessionKey' fields
        Server generates response
        Server encrypts response
        Server sends response
        Client decrypts message


Documentation
    Add <app-'page name'></app-'page name'> to html pages to have express load the corresponding page in that location.

    // This function loads a page with authentication
    async function gotoPageWithAuth(pageName) {
      fetch('/' + pageName, {
        method: 'POST',
        headers: {'Content-Type': 'application/json', 'Accept': 'text/html'},
        body: JSON.stringify({username: localStorage['username'], sessionKey: localStorage['sessionKey']})
      })
      .then(response => {
        response.text().then(text => {
          document.getElementById('appData').innerHTML = text;
        });
      })
    }


Change -> allow double jump and have client only show movable pieces as movable
Move flow
    2 cases
        Beginning of Turn, triggered by request to 'getBoard'
            Server creates a list of pieces the player can move √
            Server returns this list with the board √
            Player moves
            Client draws board, using the list of pieces to make them clickable √
            Normal move -> change player 
            Jumping move -> After Jump
            Doesn't matter if the client abuses the list and tries to move other pieces. The server validates this.

        After Jump, triggered by request to 'move' with a jumping move
            Server detects the jump √
            Server marks that piece as still movable √
            Client maintains active piece √
            Client moves the piece or clicks 'End Turn' √
            Server only allows movement of this piece to those locations √